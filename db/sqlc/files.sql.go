// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: files.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createFile = `-- name: CreateFile :one
INSERT INTO files(
    filename,
    owner_id
) VALUES (
    $1, $2
) RETURNING filename, owner_id, created_at, updated_at
`

type CreateFileParams struct {
	Filename uuid.UUID
	OwnerID  int32
}

func (q *Queries) CreateFile(ctx context.Context, arg CreateFileParams) (File, error) {
	row := q.db.QueryRowContext(ctx, createFile, arg.Filename, arg.OwnerID)
	var i File
	err := row.Scan(
		&i.Filename,
		&i.OwnerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteFile = `-- name: DeleteFile :exec
DELETE FROM files 
WHERE filename = $1
`

func (q *Queries) DeleteFile(ctx context.Context, filename uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteFile, filename)
	return err
}

const getFileById = `-- name: GetFileById :one
SELECT filename, owner_id, created_at, updated_at FROM files
WHERE filename = $1 LIMIT 1
`

func (q *Queries) GetFileById(ctx context.Context, filename uuid.UUID) (File, error) {
	row := q.db.QueryRowContext(ctx, getFileById, filename)
	var i File
	err := row.Scan(
		&i.Filename,
		&i.OwnerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listFiles = `-- name: ListFiles :many
SELECT filename, owner_id, created_at, updated_at FROM files
ORDER BY filename
LIMIT $1
OFFSET $2
`

type ListFilesParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListFiles(ctx context.Context, arg ListFilesParams) ([]File, error) {
	rows, err := q.db.QueryContext(ctx, listFiles, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []File
	for rows.Next() {
		var i File
		if err := rows.Scan(
			&i.Filename,
			&i.OwnerID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFile = `-- name: UpdateFile :one
UPDATE files
SET
owner_id = coalesce($1, owner_id),
updated_at = coalesce($2, updated_at)
WHERE filename = $3
RETURNING filename, owner_id, created_at, updated_at
`

type UpdateFileParams struct {
	OwnerID   sql.NullInt32
	UpdatedAt sql.NullTime
	Filename  uuid.UUID
}

func (q *Queries) UpdateFile(ctx context.Context, arg UpdateFileParams) (File, error) {
	row := q.db.QueryRowContext(ctx, updateFile, arg.OwnerID, arg.UpdatedAt, arg.Filename)
	var i File
	err := row.Scan(
		&i.Filename,
		&i.OwnerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
